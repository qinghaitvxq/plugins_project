#!/usr/bin/env python3

"""
This module is not really part of the demo. It is only used to compute
the NODE_MODE dictionary, to speed up lookups compared to the dictionary
structure below.

It converts a human readable *paths* structure (see below) to the model
we use in *index.js*.
"""


# Imports
# -----------------------------------------------

# std
import json
import argparse
from pprint import pprint


# Module
# -----------------------------------------------

paths = {
    "~/benedikt": {
        "development": {
            "js-TreeView": {
                "demo": {}
            }
        },
        "documents": {
            "presentations": {},
            "work": {},
            "university": {}
        },
        "music": {
            "movie scores": {},
            "pop": {},
            "rock": {},
            "classic": {},
        },
        "pictures": {},
        "videos": {},
    }
}


def make_flat(folders, paths_flat = None):
    """
    """
    if paths_flat is None:
        paths_flat = dict()

    parent_id = len(paths_flat) - 1 if paths_flat else None

    for foldername, subfolders in sorted(folders.items()):
        paths_flat[len(paths_flat)] = {
            "id": len(paths_flat),
            "parent_id": parent_id,
            "name": foldername
        }
        make_flat(subfolders, paths_flat)
    return paths_flat


if __name__ == "__main__":
    argparser = argparse.ArgumentParser(
        description = (
            "Generates a small json path database, which can be used by the "
            "demo page."
            )
    )
    argparser.add_argument(
        "-o", "--ouput-file",
        dest = "output_file",
        action = "store",
        default = None,
        help = "Write the json output in this file."
    )
    args = argparser.parse_args()

    paths_flat = make_flat(paths)
    paths_flat_json = json.dumps(
        paths_flat,
        sort_keys = True,
        indent = 4,
        separators = (",", ":")
    )

    if args.output_file:
        with open(args.output_file, "w") as file:
            file.write(paths_flat_json)
    else:
        print(paths_flat_json)
